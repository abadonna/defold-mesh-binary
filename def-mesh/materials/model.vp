#version 140

in highp vec4 position;
in highp vec2 texcoord0;
in highp vec3 normal;
in vec4 weight;
in vec4 bone;

uniform sampler2D tex_anim;
uniform sampler2D tex_runtime;

uniform uniforms_vp {
    highp vec4 animation; //w - baked or runtime baked

    highp mat4 mtx_worldview;
    highp mat4 mtx_view;
    highp mat4 mtx_proj;
    highp mat4 mtx_normal;
    mediump vec4 light;

#ifdef GL_ES
    vec4 bones[450];
#else
    vec4 bones[800];
#endif
};

out highp vec4 var_position;
out highp vec3 var_normal;
out highp vec2 var_texcoord0;
out vec3 var_light_dir;
out vec3 var_vh;

mat4 get_bone_matrix(int idx) {
    highp mat4 mtx_bone;
    int offset = idx * 3;
    
    if (animation.x == 0.) {
        mtx_bone[0] = bones[offset];
        mtx_bone[1] = bones[offset + 1];
        mtx_bone[2] = bones[offset + 2];
    }else if (animation.w == 0.) {
        mtx_bone[0] = texture(tex_anim, vec2(offset * animation.x, animation.y));
        mtx_bone[1] = texture(tex_anim, vec2((offset + 1) * animation.x, animation.y));
        mtx_bone[2] = texture(tex_anim, vec2((offset + 2) * animation.x, animation.y));
    }else
    {
        mtx_bone[0] = texture(tex_runtime, vec2(offset * animation.x, animation.y));
        mtx_bone[1] = texture(tex_runtime, vec2((offset + 1) * animation.x, animation.y));
        mtx_bone[2] = texture(tex_runtime, vec2((offset + 2) * animation.x, animation.y));
    }

    mtx_bone = transpose(mtx_bone); 
        
    //transposed matrix simplifies reading 4x3 matrix,
    //using 4x3 lets us to use more bones per mesh
    //and increase performance while sending data to shader
    return mtx_bone;
}

vec4 apply_bones(vec3 pos, out vec3 n) {
    vec4 result = vec4(0.0);
    vec3 no_trans = vec3(0.0);
    
    for (int i = 0; i < 4; i++) {
        if (weight[i] == 0.0) {break;}
        mat4 m = get_bone_matrix(int(bone[i]));
        vec4 v = m * vec4(pos.x, pos.y, pos.z, 1.0);
        result += v * weight[i];

        vec3 v2 = mat3(m) * normal;
        no_trans += v2 * weight[i];
    }
    n = vec3(no_trans.x, no_trans.z, -no_trans.y);
    return vec4(result.x, result.z, -result.y, 1.0); //to fix blender coordinates
}

void main()
{
    highp vec4 p = vec4(position.x, position.z, -position.y, 1.0);
    highp vec3 n = vec3(normal.x, normal.z, -normal.y);
    
    if (weight.x > 0.0) {
        p = apply_bones(position.xyz, n);
    }
    
    p = mtx_worldview * p;
   
    vec4 view_light = mtx_view * vec4(light.xyz, 1.0);
    var_light_dir = normalize(view_light.xyz - p.xyz);
    vec3 eye_dir = normalize(-p.xyz);
    var_vh = normalize(var_light_dir + eye_dir);   
    
    var_position = p;
    var_texcoord0 = texcoord0;
    
    var_normal = normalize((mtx_normal * vec4(n, 1.0)).xyz);
    gl_Position = mtx_proj * p;
}

