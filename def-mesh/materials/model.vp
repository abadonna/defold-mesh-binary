
attribute highp vec4 position;
attribute mediump vec2 texcoord0;
attribute mediump vec3 normal;
attribute mediump vec4 weight;
attribute mediump vec4 bone;
attribute mediump vec4 color;
attribute mediump vec3 tangent;
attribute mediump vec3 bitangent;

uniform mediump mat4 mtx_worldview;
uniform mediump mat4 mtx_view;
uniform mediump mat4 mtx_proj;
uniform mediump mat4 mtx_normal;
uniform mediump vec4 light;
uniform mediump vec4 bones[800];

varying highp vec4 var_position;
varying highp vec3 var_normal;
varying mediump vec2 var_texcoord0;
varying mediump vec3 var_light_dir;
varying mediump vec4 var_color;
varying mediump vec3 var_vh;
varying mediump mat3 var_tbn;

mat4 get_bone_matrix(int idx) {
    mat4 mtx_bone;
    int offset = idx * 4;
    mtx_bone[0] = bones[offset];
    mtx_bone[1] = bones[offset + 1];
    mtx_bone[2] = bones[offset + 2];
    mtx_bone[3] = bones[offset + 3];
    return mtx_bone;
}
void main()
{
   vec4 p = vec4(position.xyz, 1.0);
    
    if (weight.x == 0.0) { //no skinning
        p = vec4(position.x, position.z, -position.y, 1.0); //to fix blender coordinates
    } else { //apply bones
        p = vec4(0.0);
        for (int i = 0; i < 4; i++) {
            if (weight[i] == 0.0) {break;}
            mat4 m = get_bone_matrix(int(bone[i]));
            vec4 v =  m * vec4(position.x, position.y, position.z, 1.0);
            p = p + v * weight[i];
        }
        p = vec4(p.x, p.z, -p.y, 1.0);
    }
   
    p = mtx_worldview * p;
   
    vec4 view_light = mtx_view * vec4(light.xyz, 1.0);
    var_light_dir = normalize(view_light.xyz - p.xyz);
    vec3 eye_dir = normalize(-p.xyz);
    var_vh = normalize(var_light_dir + eye_dir);   
    
    var_position = p;
    var_texcoord0 = texcoord0;
    var_color = color;

    vec3 T = normalize(vec3(mtx_worldview * vec4(tangent.x,tangent.z,-tangent.y, 0.0)));
    vec3 B = normalize(vec3(mtx_worldview * vec4(bitangent.x, bitangent.z, -bitangent.y, 0.0)));
    vec3 N = normalize(vec3(mtx_worldview * vec4(normal.x, normal.z, -normal.y, 0.0)));
    var_tbn = mat3(T, B, N);
    
    var_normal = normalize((mtx_normal * vec4(normal.x, normal.z, -normal.y, 0.0)).xyz);
    gl_Position = mtx_proj * p;
}

