require "def-mesh.texture"
local reader = require "def-mesh.reader"
local SETTINGS = require "def-mesh.settings"

go.property('opaque', resource.material())
go.property('transparent', resource.material())
go.property("animate_with_texture", false)

local buffer_declaraion = {
	{name = "position", type = buffer.VALUE_TYPE_FLOAT32, count = 3},	
	{name = "normal", type = buffer.VALUE_TYPE_FLOAT32, count = 3},
	{name = "texcoord0", type = buffer.VALUE_TYPE_FLOAT32, count = 2},
	{name = "weight", type = buffer.VALUE_TYPE_FLOAT32, count = 4},
	{name = "bone", type = buffer.VALUE_TYPE_UINT8, count = 4},
	{name = "tangent", type = buffer.VALUE_TYPE_FLOAT32, count = 3},
	{name = "bitangent", type = buffer.VALUE_TYPE_FLOAT32, count = 3}
}

local function create_buffer(buf)
	--buf = buf or buffer.create(1, buffer_declaraion)
	SETTINGS.buffer_count = (SETTINGS.buffer_count and SETTINGS.buffer_count + 1) or 1
	return resource.create_buffer("/def-mesh/buffers/buffer" .. SETTINGS.buffer_count .. ".bufferc", {buffer = buf})
end

function init(self)
	self.time = 0
	self.meshes = {}
	self.total_frames = 0
	self.attaches = {}
	self.bones_go = {}
	msg.post("#dummy", "disable")
end

function final(self)
	for _, mesh in pairs(self.meshes) do
		mesh_utils.clear_data(mesh);
	end
end

local function set_frame(self, frame, frame_blend, blend)
	self.binary:set_frame(frame, frame_blend, blend)
	--[[
	for _, mesh in pairs(self.meshes) do
		mesh.set_frame(frame, frame_blend, blend)
	end
	]]--
end

local function set_texture(url, slot, folder, file)
	if not file then
		return false
	end
	local data = sys.load_resource(folder .. file)
	if not data then
		pprint(folder .. file .. " not found")
		return false
	end

	local path = folder .. file ..".texturec"
	local img = imageloader.load{data = data}

	local texture_id = hash(path)
	if not pcall(function()
		texture_id = resource.create_texture(path, img.header, img.buffer)
	end) then
		--already exists?
	end
	go.set(url, slot, texture_id)
	return true
end

local function get_bone_go(self, bone)
	if self.bones_go[bone] then
		return self.bones_go[bone]
	end
	
	for _, mesh in pairs(self.meshes) do
		if mesh.bone_names then
			for i, name in ipairs(mesh.bone_names) do
				if name == bone then
					local id = factory.create("#factory_bone")

					go.set_parent(id, mesh.url)
					mesh.add_bone_go(id, i)

					self.bones_go[bone] = id
					return id
				end
			end
		end
	end
	error("Bone " .. bone .. " not found!")
	return nil
end

local function attach(self)
	for _, attach in ipairs(self.attaches) do
		local id = get_bone_go(self, attach.bone)
		go.set_parent(attach.url, id, true)
	end

	self.attaches = {}
end

function on_message(self, message_id, message, sender)
	if message_id == hash("load_mesh") then
		self.texture_folder = message.texture_folder or "/assets/"
		if string.find(self.texture_folder, "/") ~= 1 then
			self.texture_folder = "/" .. self.texture_folder
		end
		if string.find(self.texture_folder, "/$") == nil then
			self.texture_folder = self.texture_folder .. "/"
		end

		local anim_texture = nil
		local models
		local data = sys.load_resource(message.path)
		self.binary, models = mesh_utils.load("test", data, #data)

		pprint(self.binary)
		local game_objects = {}

		for name, model in pairs(models) do 
			self.total_frames = model.frames
			for i, mesh in ipairs(model.meshes) do
	
				local f = mesh.material.type == 0 and "#factory" or "#factory_trans"

				local id = factory.create(f, model.position, model.rotation, {}, model.scale)
				local url = msg.url(nil, id, "mesh")

				game_objects[i == 1 and name or (name .. "_" .. i)] = {id = id, url = url, parent = model.parent}

				if self.opaque ~= hash("") and mesh.material.type == 0 then
					go.set(url, "material", self.opaque)
				elseif self.transparent ~= hash("") and mesh.material.type ~= 0 then
					go.set(url, "material", self.transparent)
				end
				

			
				--local values = buffer.get_stream(mesh.buffer, "normal")
				--pprint("normals", values[1], values[2], values[3])
				--[[
				local values = buffer.get_stream(mesh.buffer, "texcoord0")
				pprint("texcoords", values[1], values[2], values[3], values[4])
				--]]
						
				
				local v = create_buffer(mesh.buffer)
				go.set(url, "vertices", v)

				local options = vmath.vector4(0.0)
				local options_specular = vmath.vector4(0.0)
				options_specular.y = mesh.material.specular.value
				options_specular.z = mesh.material.roughness.value

				options.z = mesh.material.type

				--[[
				if anim_texture then
					mesh.animate_with_texture = true
					mesh.animate_tex_width = twidth
					mesh.animate_tex_height = theight
					go.set(mesh.url, "texture3", anim_texture)
				end
				--]]

				if mesh.material.texture then
					options.x = 1.0
					set_texture(url, "texture0", self.texture_folder, mesh.material.texture)
				end

				if mesh.material.normal and
					set_texture(url, "texture1", self.texture_folder, mesh.material.normal.texture) 
				then
					options.y = mesh.material.normal.value
				end

				if mesh.material.specular.texture and
					set_texture(url, "texture2", self.texture_folder, mesh.material.specular.texture) 
				then
					options_specular.x = 1.0 + mesh.material.specular.invert
					if mesh.material.specular.ramp then
						local r = mesh.material.specular.ramp
						go.set(url, "spec_ramp", vmath.vector4(r.p1, r.v1, r.p2, r.v2))
					end
				end

				if mesh.material.roughness.texture and
					set_texture(url, "texture2", self.texture_folder, mesh.material.roughness.texture) 
				then
					-- roughness and specular are usually the same?
					options_specular.w = 1.0
					if mesh.material.roughness.ramp then
						local r = mesh.material.roughness.ramp
						go.set(url, "rough_ramp", vmath.vector4(r.p1, r.v1, r.p2, r.v2))
					end
				end

				go.set(url, "base_color", mesh.material and mesh.material.color or vmath.vector4(0.8,0.8,0.8,1))
				go.set(url, "options", options)
				go.set(url, "options_specular", options_specular)

				go.set_parent(id, ".", false)
				
			end
			
		end	
		

		--[[
		reader.init_from_resource(message.path)
		while not reader.eof() do
			for i, mesh in ipairs(reader.read_mesh()) do --can be multiple meshes if initial mesh contains multiple materials

				if i == 1 and mesh.frames and self.animate_with_texture then
					anim_texture, twidth, theight = create_animation_texture(mesh)
				end
				
				pprint(mesh.name .. " " .. #mesh.faces .. " triangles")

				if mesh.frames then
					self.total_frames = #mesh.frames
				end

				local buf = mesh.create_buffer()
				local f = mesh.material.type == 0 and "#factory" or "#factory_trans"
				
				mesh.id = factory.create(f, mesh.position, mesh.rotation, {}, mesh.scale)
				mesh.url = msg.url(nil, mesh.id, "mesh")

				if self.opaque ~= hash("") and mesh.material.type == 0 then
					go.set(mesh.url, "material", self.opaque)
				elseif self.transparent ~= hash("") and mesh.material.type ~= 0 then
					go.set(mesh.url, "material", self.transparent)
				end
				

				local v = create_buffer(buf)
				go.set(mesh.url, "vertices", v)

				mesh.apply_armature()
				local options = vmath.vector4(0.0)
				local options_specular = vmath.vector4(0.0)
				options_specular.y = mesh.material.specular.value
				options_specular.z = mesh.material.roughness.value

				options.z = mesh.material.type

				if anim_texture then
					mesh.animate_with_texture = true
					mesh.animate_tex_width = twidth
					mesh.animate_tex_height = theight
					go.set(mesh.url, "texture3", anim_texture)
				end

				if mesh.material.texture then
					options.x = 1.0
					set_texture(mesh.url, "texture0", self.texture_folder, mesh.material.texture)
				end

				if mesh.material.normal and
				set_texture(mesh.url, "texture1", self.texture_folder, mesh.material.normal.texture) 
				then
					options.y = mesh.material.normal.strength
				end

				if mesh.material.specular.texture and
				set_texture(mesh.url, "texture2", self.texture_folder, mesh.material.specular.texture) 
				then
					options_specular.x = 1.0 + mesh.material.specular.invert
					if mesh.material.specular.ramp then
						local r = mesh.material.specular.ramp
						go.set(mesh.url, "spec_ramp", vmath.vector4(r.p1, r.v1, r.p2, r.v2))
					end
				end
				
				if mesh.material.roughness.texture and
				set_texture(mesh.url, "texture2", self.texture_folder, mesh.material.roughness.texture) 
				then
					-- roughness and specular are usually the same?
					options_specular.w = 1.0
					if mesh.material.roughness.ramp then
						local r = mesh.material.roughness.ramp
						go.set(mesh.url, "rough_ramp", vmath.vector4(r.p1, r.v1, r.p2, r.v2))
					end
				end

				go.set(mesh.url, "base_color", mesh.material and mesh.material.color or vmath.vector4(0.8,0.8,0.8,1))
				go.set(mesh.url, "options", options)
				go.set(mesh.url, "options_specular", options_specular)
				
				self.meshes[mesh.name] = mesh
				
			end
		end
		--]]
		

		--set hierarchy
		for key, mesh in pairs(game_objects) do
			if mesh.parent and game_objects[mesh.parent] then
				go.set_parent(mesh.id, game_objects[mesh.parent].id, true)
			end
		end
		
		--[[
		for key, mesh in pairs(self.meshes) do
			if mesh.parent and self.meshes[mesh.parent] then
				go.set_parent(mesh.id, self.meshes[mesh.parent].id, false)
			else
				go.set_parent(mesh.id, ".", false)
				if mesh.parent then
					go.set_position(mesh.world_.position, mesh.id)
					go.set_scale(mesh.world_.scale, mesh.id)
					go.set_rotation(mesh.world_.rotation, mesh.id)
				end
			end
		end
		--]]

		if message.animations then
			local res = sys.load_resource(message.animations)
			if res then
				self.animations = loadstring(res)()
			end
		end

		self.loaded = true
		attach(self)
		msg.post(sender, "mesh_loaded", {frames = self.total_frames})
		
	elseif message_id == hash("set_frame") then
		set_frame(self, message.frame)

	elseif message_id == hash("attach_to_bone") then
		table.insert(self.attaches, {bone = message.bone, url = message.url})
		if self.loaded then
			attach(self)
		end

	elseif message_id == hash("set_shapes") then
		for _, mesh in pairs(self.meshes) do
			mesh.set_shapes(message.shapes)
		end

	elseif message_id == hash("play") then
		local animation = message.anim and self.animations[message.anim] or {start = message.start, finish = message.finish}
		if self.animation and message.blend_frames then
			self.blend_from = self.frame
			self.last_blend_frame = self.animation.finish
			self.blend = 1
			self.blend_step = 1./message.blend_frames
		end
		self.animation = animation
		self.frame = self.animation.start
		set_frame(self, self.blend_from or self.frame )
		
		self.sender = sender
	end
end

function update(self, dt)
	if self.animation then
		self.time = self.time + dt
		if self.time > .03 then
			self.time = 0.0
			if self.blend_from then
				self.blend = self.blend - self.blend_step
				
				if self.blend > 0 then
					self.frame = math.min(self.frame + 1, self.animation.finish)
					self.blend_from = self.blend_from + 1
					set_frame(self, self.frame, self.blend_from, self.blend)
					return
				end

				self.blend_from = nil
			end

			if self.frame > self.animation.finish then
				self.animation = nil
				msg.post(self.sender, "mesh_animation_done")
			else
				self.frame = self.frame + 1
			end
			
			set_frame(self, self.frame)
		end
	end

	
end