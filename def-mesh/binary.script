local reader = require "def-mesh.reader"

go.property('t1', resource.texture())
go.property('t2', resource.texture())
go.property('t3', resource.texture())
go.property('t4', resource.texture())
go.property('t5', resource.texture())
go.property('t6', resource.texture())
go.property('t7', resource.texture())
go.property('t8', resource.texture())
go.property('t9', resource.texture())
go.property('t10', resource.texture())

go.property("v1", resource.buffer("/def-mesh/buffers/dummy1.buffer"))
go.property("v2", resource.buffer("/def-mesh/buffers/dummy2.buffer"))
go.property("v3", resource.buffer("/def-mesh/buffers/dummy3.buffer"))
go.property("v4", resource.buffer("/def-mesh/buffers/dummy4.buffer"))
go.property("v5", resource.buffer("/def-mesh/buffers/dummy5.buffer"))
go.property("v6", resource.buffer("/def-mesh/buffers/dummy6.buffer"))
go.property("v7", resource.buffer("/def-mesh/buffers/dummy7.buffer"))
go.property("v8", resource.buffer("/def-mesh/buffers/dummy8.buffer"))
go.property("v9", resource.buffer("/def-mesh/buffers/dummy9.buffer"))
go.property("v10", resource.buffer("/def-mesh/buffers/dummy10.buffer"))


function init(self)
	self.meshes = {}
	self.total_frames = 0
	if BUFFERS == nil then
		BUFFERS = {self.v1, self.v2, self.v3, self.v4, self.v5, self.v6, self.v7, self.v8, self.v9, self.v10}
	end
end

function final(self)
	for _, id in ipairs(self.meshes) do
		local mesh_url = msg.url(nil, id, "mesh")
		table.insert(BUFFERS, go.get(mesh_url, "vertices")) --return buffer to pool
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("load_mesh") then
		if #BUFFERS == 0 then
			pprint("No more buffers")
			return
		end

		reader.init_from_resource(message.path)
		while not reader.eof() and #BUFFERS > 0 do
			for _, mesh in ipairs(reader.read_mesh()) do --can be multiple meshes if mesh was decomposed
				pprint(mesh.name .. " " .. #mesh.faces .. " triangles")

				if mesh.frames then
					self.total_frames = #mesh.frames
				end
				
				local buf = mesh.create_buffer()
				local f = "#factory"
				if mesh.materials[1].type == 1 then
					pprint("transparent!")
					f = "#factory_trans"
				end
				
				mesh.id = factory.create(f, mesh.position, mesh.rotation, {}, mesh.scale)
				mesh.url = msg.url(nil, mesh.id, "mesh")
				

				local v = table.remove(BUFFERS)
				resource.set_buffer(v, buf)
				go.set(mesh.url, "vertices", v)

				mesh.apply_armature()

				for i, texture in ipairs(mesh.textures) do
					if not pcall(function()
						local texture = hash("/textures/" .. string.gsub(texture, ".png", ".texturec"))
						go.set(mesh.url, "texture" .. (i-1), texture)
					end) then
						pprint(texture .. " not found")
						go.set(mesh.url, "texture" .. (i-1), self.t1)
					end
				end

				self.meshes[mesh.name] = mesh
			end
		end

		--set hierarchy
		for key, mesh in pairs(self.meshes) do
			if mesh.parent and self.meshes[mesh.parent] then
				go.set_parent(mesh.id, self.meshes[mesh.parent].id, false)
			else
				go.set_parent(mesh.id, ".", false)
				if mesh.parent then
					go.set_position(mesh.world_.position, mesh.id)
					go.set_scale(mesh.world_.scale, mesh.id)
					go.set_rotation(mesh.world_.rotation, mesh.id)
				end
			end
		end

		msg.post(sender, "meshes_loaded", {frames = self.total_frames})
		
	elseif message_id == hash("set_frame") then
		for _, mesh in pairs(self.meshes) do
			mesh.set_frame(message.frame, mesh.url)
		end
		
	elseif message_id == hash("reset") then
		for _, mesh in pairs(self.meshes) do
			go.set(mesh.url, "vertices", self.v1)
		end
	end
end
