local reader = require "def-mesh.reader"
go.property('t1', resource.texture())
go.property('t2', resource.texture())
go.property('t3', resource.texture())
go.property('t4', resource.texture())
go.property('t5', resource.texture())
go.property('t6', resource.texture())
go.property('t7', resource.texture())
go.property('t8', resource.texture())

go.property("v1", resource.buffer("/def-mesh/buffers/dummy1.buffer"))
go.property("v2", resource.buffer("/def-mesh/buffers/dummy2.buffer"))
go.property("v3", resource.buffer("/def-mesh/buffers/dummy3.buffer"))
go.property("v4", resource.buffer("/def-mesh/buffers/dummy4.buffer"))
go.property("v5", resource.buffer("/def-mesh/buffers/dummy5.buffer"))
go.property("v6", resource.buffer("/def-mesh/buffers/dummy6.buffer"))
go.property("v7", resource.buffer("/def-mesh/buffers/dummy7.buffer"))
go.property("v8", resource.buffer("/def-mesh/buffers/dummy8.buffer"))


function init(self)
	self.meshes = {}
	if BUFFERS == nil then
		BUFFERS = {self.v1, self.v2, self.v3, self.v4, self.v5, self.v6, self.v7, self.v8}
	end
end

function final(self)
	for _, id in ipairs(self.meshes) do
		local mesh_url = msg.url(nil, id, "mesh")
		table.insert(BUFFERS, go.get(mesh_url, "vertices"))
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("load_mesh") then
		if #BUFFERS == 0 then
			pprint("No more buffers")
			return
		end
		
		reader.init_from_resource(message.path)
		while not reader.eof() and #BUFFERS > 0 do
			local mesh = reader.read_mesh()
			pprint(mesh.name)
			local buf = mesh.create_buffer()
			local id = factory.create("#factory", mesh.position, mesh.rotation, {}, mesh.scale)
			local mesh_url = msg.url(nil, id, "mesh")
			
			local v = table.remove(BUFFERS)
			resource.set_buffer(v, buf)
			go.set(mesh_url, "vertices", v)

			if mesh.texture then
				if not pcall(function()
					local texture = hash("/textures/" .. string.gsub(mesh.texture, ".png", ".texturec"))
					go.set(mesh_url, "texture0", texture)
				end) then
					pprint(mesh.texture .. " not found")
				end
			else
				go.set(mesh_url, "options", vmath.vector4(1.0, 0, 0, 0)) --to ignore texture in shader
				go.set(mesh_url, "tint", mesh.color)
			end
			mesh.id = id
			self.meshes[mesh.name] = mesh
		end

		--set hierarchy
		for key, mesh in pairs(self.meshes) do
			if mesh.parent and self.meshes[mesh.parent] then
				go.set_parent(mesh.id, self.meshes[mesh.parent].id, false)
			else
				go.set_parent(mesh.id, ".", false)
				if mesh.parent then
					go.set_position(mesh.world_.position, mesh.id)
					go.set_scale(mesh.world_.scale, mesh.id)
					go.set_rotation(mesh.world_.rotation, mesh.id)
				end
			end
		end

		msg.post(sender, "meshes_loaded")
	end
end
