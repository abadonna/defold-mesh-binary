go.property('opaque', resource.material())
go.property('transparent', resource.material())
go.property("bakeAnimations", false)

local function create_buffer(buf)
	BUFFER_COUNT = BUFFER_COUNT and BUFFER_COUNT + 1 or 1
	local path = "/def-mesh/buffers/buffer" .. BUFFER_COUNT .. ".bufferc"
	return resource.create_buffer(path, {buffer = buf, transfer_ownership = false}), path
end

function native_update_buffer(mesh_url, buffer)
	resource.set_buffer(go.get(mesh_url, "vertices"), buffer, {transfer_ownership = false})
end

function init(self)
	self.time = 0
	self.meshes = {}
	self.total_frames = 0
	self.attaches = {}
	self.bones_go = {}
	self.textures = {}
	msg.post("#dummy", "disable")
end

function final(self)
	for key, mesh in pairs(self.game_objects) do
		resource.release(mesh.path)
	end
	
	if self.binary then
		if self.binary:delete() then --clean up textures, no more instances
			for texture, _ in pairs(self.textures) do
				resource.release(texture)
			end
		end
	end
end

local function set_frame(self, frame, frame_blend, blend)
	self.binary:set_frame(frame, frame_blend == nil and -1 or frame_blend, blend or 0)
end

local function set_texture(self, url, slot, folder, file)
	if not file then
		return false
	end
	local data = sys.load_resource(folder .. file)
	if not data then
		pprint(folder .. file .. " not found")
		return false
	end

	local path = folder .. file ..".texturec"
	local img = imageloader.load{data = data}

	local texture_id = hash(path)
	if not pcall(function()
		texture_id = resource.create_texture(path, img.header, img.buffer)
	end) then
		--already exists?
	end
	self.textures[texture_id] = true
	go.set(url, slot, texture_id)
	return true
end

local function get_bone_go(self, bone)
	if self.bones_go[bone] then
		return self.bones_go[bone]
	end

	local id = factory.create("#factory_bone")

	local parent = self.binary:attach_bone_go(id, bone)
	if parent then
		go.set_parent(id, parent)
		self.bones_go[bone] = id

		return id
	end
	
	return nil
end

local function attach(self)
	for _, attach in ipairs(self.attaches) do
		local id = get_bone_go(self, attach.bone)
		go.set_parent(attach.url, id, true)
	end

	self.attaches = {}
end

function on_message(self, message_id, message, sender)
	if message_id == hash("load_mesh") then
		self.texture_folder = message.texture_folder or "/assets/"
		if string.find(self.texture_folder, "/") ~= 1 then
			self.texture_folder = "/" .. self.texture_folder
		end
		if string.find(self.texture_folder, "/$") == nil then
			self.texture_folder = self.texture_folder .. "/"
		end

		local anim_texture = nil
		local models
		local data = sys.load_resource(message.path)
		self.binary, models = mesh_utils.load(message.path, data, self.bakeAnimations)

		--pprint(self.binary, models)
		self.game_objects = {}

		for name, model in pairs(models) do 
			self.total_frames = model.frames
			local anim_texture
			if model.frames > 1 and self.bakeAnimations then
				
				local tpath = string.match(message.path, "(%a-)[$%.]") .. "_" .. name
				tpath = "/__anim_" .. tpath:gsub("[%./]", "") ..".texturec"

				anim_texture = hash(tpath)

				if not pcall(function()
					local info = resource.get_texture_info(tpath)
					
				end) then
					local twidth, theight, tbuffer = model:get_animation_buffer()
					
					local tparams = {
						width          = twidth,
						height         = theight,
						type           = resource.TEXTURE_TYPE_2D,
						format         = resource.TEXTURE_FORMAT_RGBA32F,
					}

					anim_texture = resource.create_texture(tpath, tparams, tbuffer)
				end

			end
			
			for i, mesh in ipairs(model.meshes) do
	
				local f = mesh.material.type == 0 and "#factory" or "#factory_trans"

				local id = factory.create(f, model.position, model.rotation, {}, model.scale)
				local url = msg.url(nil, id, "mesh")
				mesh:set_url(url);

				if self.opaque ~= hash("") and mesh.material.type == 0 then
					go.set(url, "material", self.opaque)
				elseif self.transparent ~= hash("") and mesh.material.type ~= 0 then
					go.set(url, "material", self.transparent)
				end
				
				local v, path = create_buffer(mesh.buffer)
				go.set(url, "vertices", v)

				self.game_objects[i == 1 and name or (name .. "_" .. i)] = 
				{
					id = id, 
					url = url, 
					path = path,
					parent = model.parent
				}
				
				local options = vmath.vector4(0.0)
				local options_specular = vmath.vector4(0.0)
				options_specular.y = mesh.material.specular.value
				options_specular.z = mesh.material.roughness.value

				options.z = mesh.material.type

				if anim_texture then
					self.textures[anim_texture] = true;
					go.set(url, "texture3", anim_texture)
				end

				if mesh.material.texture then
					options.x = 1.0
					set_texture(self, url, "texture0", self.texture_folder, mesh.material.texture)
				end

				if mesh.material.normal and
					set_texture(self, url, "texture1", self.texture_folder, mesh.material.normal.texture) 
				then
					options.y = mesh.material.normal.value
				end

				if mesh.material.specular.texture and
					set_texture(self, url, "texture2", self.texture_folder, mesh.material.specular.texture) 
				then
					options_specular.x = 1.0 + mesh.material.specular.invert
					if mesh.material.specular.ramp then
						local r = mesh.material.specular.ramp
						go.set(url, "spec_ramp", vmath.vector4(r.p1, r.v1, r.p2, r.v2))
					end
				end

				if mesh.material.roughness.texture and
					set_texture(self, url, "texture2", self.texture_folder, mesh.material.roughness.texture) 
				then
					-- roughness and specular are usually the same?
					options_specular.w = 1.0
					if mesh.material.roughness.ramp then
						local r = mesh.material.roughness.ramp
						go.set(url, "rough_ramp", vmath.vector4(r.p1, r.v1, r.p2, r.v2))
					end
				end

				go.set(url, "base_color", mesh.material and mesh.material.color or vmath.vector4(0.8,0.8,0.8,1))
				go.set(url, "options", options)
				go.set(url, "options_specular", options_specular)

				go.set_parent(id, ".", false)
				
			end
			
		end	
		
		--set hierarchy
		for key, mesh in pairs(self.game_objects) do
			if mesh.parent and self.game_objects[mesh.parent] then
				go.set_parent(mesh.id, self.game_objects[mesh.parent].id, true)
			end
		end

		self.binary:set_frame(0);

		if message.animations then
			local res = sys.load_resource(message.animations)
			if res then
				self.animations = loadstring(res)()
			end
		end

		self.loaded = true
		attach(self)
		msg.post(sender, "mesh_loaded", {frames = self.total_frames})
		
	elseif message_id == hash("set_frame") then
		set_frame(self, message.frame)

	elseif message_id == hash("attach_to_bone") then
		table.insert(self.attaches, {bone = message.bone, url = message.url})
		if self.loaded then
			attach(self)
		end

	elseif message_id == hash("set_shapes") then
		self.binary:set_shapes(message.shapes)

	elseif message_id == hash("play") then
		local animation = message.anim and self.animations[message.anim] or {start = message.start, finish = message.finish}
		if self.animation and message.blend_frames then
			self.blend_from = self.frame
			self.last_blend_frame = self.animation.finish
			self.blend = 1
			self.blend_step = 1./message.blend_frames
		end
		self.animation = animation
		self.frame = self.animation.start
		set_frame(self, self.blend_from or self.frame )
		
		self.sender = sender
	end
end

function update(self, dt)
	if self.animation then
		self.time = self.time + dt
		if self.time > .03 then
			self.time = 0.0
			if self.blend_from then
				self.blend = self.blend - self.blend_step
				
				if self.blend > 0 then
					self.frame = math.min(self.frame + 1, self.animation.finish)
					self.blend_from = self.blend_from + 1
					set_frame(self, self.frame, self.blend_from, self.blend)
					return
				end

				self.blend_from = nil
			end

			if self.frame > self.animation.finish then
				self.animation = nil
				msg.post(self.sender, "mesh_animation_done")
			else
				self.frame = self.frame + 1
			end
			
			set_frame(self, self.frame)
		end
	end

	
end